---
import { type CollectionEntry, getCollection } from "astro:content";
import TableOfContents from "@components/TableOfContents.astro";
import ShareLinks from "@/components/ShareLinks.astro";
type Props = {
  entry: CollectionEntry<"blog"> | CollectionEntry<"projects">;
};

// Get the requested entry
const { entry } = Astro.props;
const { collection } = entry;
const { Content, headings } = await entry.render();

// Get the next and prev entries (modulo to wrap index)
const items = (await getCollection(collection))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
const index = items.findIndex((x) => x.slug === entry.slug);
const prev = index !== 0 ? items[index - 1] : null;
const next = index !== items.length ? items[index + 1] : null;
---

<div>
  {headings.length > 0 && <TableOfContents headings={headings} />}
  <article>
    <Content />
  </article>

  <ShareLinks />

  <hr class="my-6 border-dashed border-1 border-[#999999]" />
  {
    (prev || next) && (
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
        {prev && (
          <a
            href={`/${prev.collection}/${prev.slug}`}
            class="order-first group p-2 py-4 gap-2 flex items-center border rounded-lg hover:bg-black/5 hover:dark:bg-white/10 border-black/15 dark:border-white/20 blend"
          >
            <div class="order-2 w-full h-full group-hover:text-black group-hover:dark:text-white blend">
              <div class="flex flex-wrap gap-2">
                <div class="text-sm uppercase">Prev</div>
              </div>
              <div class="font-semibold mt-2 text-black dark:text-white">
                {prev.data.title}
              </div>
            </div>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke-width="2.5"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="order-1 stroke-current group-hover:stroke-black group-hover:dark:stroke-white rotate-180"
            >
              <line
                x1="5"
                y1="12"
                x2="19"
                y2="12"
                class="scale-x-0 group-hover:scale-x-100 translate-x-4 group-hover:translate-x-1 transition-all duration-300 ease-in-out"
              />
              <polyline
                points="12 5 19 12 12 19"
                class="translate-x-0 group-hover:translate-x-1 transition-all duration-300 ease-in-out"
              />
            </svg>
          </a>
        )}
        {next && (
          <a
            href={`/${next.collection}/${next.slug}`}
            class="col-start-2 group p-2 py-4 gap-2 flex items-center border rounded-lg hover:bg-black/5 hover:dark:bg-white/10 border-black/15 dark:border-white/20 transition-colors duration-300 ease-in-out"
          >
            <div class="w-full h-full text-right group-hover:text-black group-hover:dark:text-white blend">
              <div class="text-sm uppercase">Next</div>
              <div class="font-semibold mt-2 text-black dark:text-white">
                {next.data.title}
              </div>
            </div>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke-width="2.5"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="stroke-current group-hover:stroke-black group-hover:dark:stroke-white"
            >
              <line
                x1="5"
                y1="12"
                x2="19"
                y2="12"
                class="scale-x-0 group-hover:scale-x-100 translate-x-4 group-hover:translate-x-1 transition-all duration-300 ease-in-out"
              />
              <polyline
                points="12 5 19 12 12 19"
                class="translate-x-0 group-hover:translate-x-1 transition-all duration-300 ease-in-out"
              />
            </svg>
          </a>
        )}
      </div>
    )
  }
</div>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-50 h-1 w-full";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-red-600";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();
</script>
